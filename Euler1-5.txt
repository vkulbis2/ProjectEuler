
Project Euler #1
public class Factorial {
	public static void main(String[] args) {
		int multiples= 0;
		for(int i = 0; i<1000; i++){
			if(i%3==0 || i%5==0)
				multiples += i;
		}
			
		System.out.println(multiples);
	}
}

Project Euler #2
public class Factorial {
	public static void main(String[] args) {
		int first = 0;
		int second = 0;
		int sum = 1;
		int evens = 0;
		
		while(sum<4000000){
			first = sum;
			second = first + second;
			if(second%2==0)
				evens += second;
			sum = sum + second;
			if(sum%2==0)
				evens += sum;
		}
		System.out.println(evens);
	}
}


Project Eurler # 3
public class Factorial {
	public static void main(String[] args) {
		long prime = 600851475143L;
		long biggest = 1L;
		for(long i=1L; i<prime; i++){
			if(prime%i==0)
				for(long x=1L; x<i; x++){
					if(i%x != 0)
						if(i>biggest)
							biggest = i;
				}
		}
		System.out.println(biggest);
		
	}
}

Project Euler #4
public class Factorial {
	public static void main(String[] args) {
		
	public String run() {
		int pal = -1;
		for (int i=100; i<1000;i++) {
			for (int x = 100; x < 1000; x++) {
				int prod = i * x;
				if (Library.isPalindrome(prod) && prod > pal)
					pal = prod;
			}
		}
		return Integer.toString(mpal);
	}
	
}
}
Project Euler #5
import java.math.BigInteger;


public class Factorial {
	
	public static void main(String[] args) {	
	public String run() {
		BigInteger allLcm = BigInteger.ONE;
		for (int i = 1; i <= 20; i++)
			allLcm = lcm(BigInteger.valueOf(i), allLcm);
		return allLcm.toString();
	}	
	private static BigInteger lcm(BigInteger x, BigInteger y) {
		return x.divide(x.gcd(y)).multiply(y);
	}
	}
}
